
import threading
import argparse
import sys
import os

class fileThread(threading.Thread):
	global kill

	def __init__(self, args=(), name=None):
		threading.Thread.__init__(self, name=name)
		self.args = args
	
	def run(self):
		filename = r'/test.txt'
		filePath = r'/nfs/student/s/shkevin/CS/cs544/lab3' + filename
		
		while not kill.is_set():

			if kill.is_set():
				break

			try:
				if os.path.exists(filePath):
					file = open(filePath, "r")
					contents = file.read()
					print(contents)
					file.close()
					kill.set()
					print("kill is set")
			except IOError:
				print("Can't open file")
				kill.set()


if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument("-t", "--threads",action='store', type=int , \
		help='Number of threads to run', required=False)
	args = parser.parse_args()

	workers = []
	kill = threading.Event()

	if args.threads is not None:
		threads = args.threads
	else:
		threads = 10

	for x in range(threads):
		mythread = fileThread(name = "Thread-{}".format(x + 1), args =())
		workers.append(mythread)
		mythread.start()

	mainThread = threading.currentThread()
	for worker in workers:
		if worker is not mainThread:
			worker.join()